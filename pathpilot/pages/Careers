
import React, { useState, useEffect, useCallback } from "react";
import { CareerPath } from "@/entities/all";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  TrendingUp,
  DollarSign,
  Shield,
  Search,
  SlidersHorizontal,
} from "lucide-react";
import { motion } from "framer-motion";

export default function Careers() {
  const [allCareers, setAllCareers] = useState([]);
  const [filteredCareers, setFilteredCareers] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [filters, setFilters] = useState({
    category: "all",
    demand: "all",
  });

  useEffect(() => {
    loadCareers();
  }, []);

  const applyFilters = useCallback(() => {
    let tempCareers = [...allCareers];

    // Search
    if (searchTerm) {
      tempCareers = tempCareers.filter(
        (c) =>
          c.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
          c.description.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    // Category filter
    if (filters.category !== "all") {
      tempCareers = tempCareers.filter((c) => c.category === filters.category);
    }

    // Demand filter
    if (filters.demand !== "all") {
      tempCareers = tempCareers.filter((c) => c.demand_growth === filters.demand);
    }

    setFilteredCareers(tempCareers);
  }, [allCareers, searchTerm, filters]);

  useEffect(() => {
    applyFilters();
  }, [applyFilters]);

  const loadCareers = async () => {
    setIsLoading(true);
    try {
      const careers = await CareerPath.list("-future_proof_score");
      setAllCareers(careers);
      // Removed direct setFilteredCareers here as applyFilters useEffect will handle initial filtering
    } catch (error) {
      console.error("Error loading career paths:", error);
    }
    setIsLoading(false);
  };

  const handleFilterChange = (type, value) => {
    setFilters((prev) => ({ ...prev, [type]: value }));
  };

  const getRiskColor = (risk) => {
    if (risk === "low") return "bg-green-100 text-green-800";
    if (risk === "medium") return "bg-yellow-100 text-yellow-800";
    if (risk === "high") return "bg-red-100 text-red-800";
    return "bg-slate-100 text-slate-800";
  };

  const getDemandIcon = (demand) => {
    if (demand === "high_growth")
      return <TrendingUp className="w-4 h-4 text-green-600" />;
    if (demand === "growing")
      return <TrendingUp className="w-4 h-4 text-blue-600" />;
    return <TrendingUp className="w-4 h-4 text-slate-500" />;
  };

  const categories = [...new Set(allCareers.map((c) => c.category))];
  const demandOptions = [
    { value: "high_growth", label: "High Growth" },
    { value: "growing", label: "Growing" },
    { value: "stable", label: "Stable" },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/30 p-6">
      <div className="max-w-7xl mx-auto space-y-8">
        <div>
          <h1 className="text-3xl md:text-4xl font-bold text-slate-900 mb-2 flex items-center gap-3">
            <TrendingUp className="w-8 h-8 text-blue-600" />
            Explore Career Paths
          </h1>
          <p className="text-slate-600 text-lg">
            Discover future-proof careers tailored to your ambitions.
          </p>
        </div>

        {/* Filters */}
        <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <CardContent className="p-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-center">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-slate-400" />
                <Input
                  placeholder="Search careers..."
                  className="pl-10"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
              <Select
                onValueChange={(value) => handleFilterChange("category", value)}
                defaultValue="all"
              >
                <SelectTrigger>
                  <SelectValue placeholder="Filter by category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Categories</SelectItem>
                  {categories.map((cat) => (
                    <SelectItem key={cat} value={cat}>
                      {cat}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <Select
                onValueChange={(value) => handleFilterChange("demand", value)}
                defaultValue="all"
              >
                <SelectTrigger>
                  <SelectValue placeholder="Filter by demand" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Demand Levels</SelectItem>
                  {demandOptions.map((opt) => (
                    <SelectItem key={opt.value} value={opt.value}>
                      {opt.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Career Grid */}
        {isLoading ? (
          <p className="text-center">Loading careers...</p>
        ) : (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {filteredCareers.map((career, index) => (
              <motion.div
                key={career.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: index * 0.05 }}
              >
                <Card className="h-full border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 flex flex-col">
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <CardTitle className="text-xl font-bold text-slate-900">
                        {career.title}
                      </CardTitle>
                      <Badge className="bg-blue-100 text-blue-800 border-blue-200 whitespace-nowrap">
                        {career.future_proof_score}% Future-Proof
                      </Badge>
                    </div>
                  </CardHeader>
                  <CardContent className="flex-grow space-y-4">
                    <p className="text-slate-600 text-sm line-clamp-3">
                      {career.description}
                    </p>
                    <div>
                      <h4 className="text-sm font-semibold text-slate-800 mb-2">
                        Core Skills:
                      </h4>
                      <div className="flex flex-wrap gap-2">
                        {career.required_skills.slice(0, 4).map((skill) => (
                          <Badge key={skill} variant="outline">{skill}</Badge>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                  <div className="p-6 pt-0 mt-auto">
                    <div className="flex justify-between items-center text-sm border-t border-slate-200 pt-4">
                      <div className="flex items-center gap-2">
                        <DollarSign className="w-4 h-4 text-green-600" />
                        <span className="font-medium text-slate-700">
                          ${career.salary_range.min}k - ${career.salary_range.max}k
                        </span>
                      </div>
                      <Badge className={getRiskColor(career.automation_risk)}>
                        <Shield className="w-3 h-3 mr-1" />
                        {career.automation_risk} Risk
                      </Badge>
                      <div className="flex items-center gap-1">
                        {getDemandIcon(career.demand_growth)}
                        <span className="capitalize text-slate-700 font-medium">
                          {career.demand_growth.replace("_", " ")}
                        </span>
                      </div>
                    </div>
                  </div>
                </Card>
              </motion.div>
            ))}
          </div>
        )}
        {filteredCareers.length === 0 && !isLoading && (
          <p className="text-center text-slate-600 py-12">No careers match your criteria.</p>
        )}
      </div>
    </div>
  );
}
