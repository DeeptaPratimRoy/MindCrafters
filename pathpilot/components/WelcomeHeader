import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { 
  ArrowRight, 
  ArrowLeft, 
  Upload, 
  X, 
  Plus,
  User,
  GraduationCap,
  Brain,
  Target,
  FileText,
  CheckCircle
} from "lucide-react";
import { UploadFile } from "@/integrations/Core";

const PREDEFINED_SKILLS = [
  "JavaScript", "Python", "React", "Node.js", "SQL", "HTML/CSS", "Java", "C++",
  "Data Analysis", "Machine Learning", "Design Thinking", "Project Management",
  "Digital Marketing", "Content Writing", "Public Speaking", "Leadership",
  "Problem Solving", "Critical Thinking", "Communication", "Teamwork"
];

const INTEREST_OPTIONS = [
  "Technology", "Business", "Design", "Marketing", "Data Science", "Healthcare",
  "Education", "Finance", "Engineering", "Arts & Creative", "Research", "Consulting"
];

export default function OnboardingFlow({ onComplete }) {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    education_stage: "",
    graduation_year: "",
    current_skills: [],
    interests: [],
    target_careers: [],
    bio: "",
    resume_url: ""
  });
  const [skillInput, setSkillInput] = useState("");
  const [careerInput, setCareerInput] = useState("");
  const [uploading, setUploading] = useState(false);
  const [errors, setErrors] = useState({});

  const steps = [
    { number: 1, title: "Education", icon: GraduationCap },
    { number: 2, title: "Skills", icon: Brain },
    { number: 3, title: "Interests", icon: Target },
    { number: 4, title: "Goals", icon: Target },
    { number: 5, title: "Profile", icon: User }
  ];

  const addSkill = (skillName) => {
    if (skillName && !formData.current_skills.find(s => s.name === skillName)) {
      setFormData({
        ...formData,
        current_skills: [...formData.current_skills, { name: skillName, level: 5 }]
      });
      setSkillInput("");
    }
  };

  const removeSkill = (skillName) => {
    setFormData({
      ...formData,
      current_skills: formData.current_skills.filter(s => s.name !== skillName)
    });
  };

  const updateSkillLevel = (skillName, level) => {
    setFormData({
      ...formData,
      current_skills: formData.current_skills.map(s => 
        s.name === skillName ? { ...s, level: parseInt(level) } : s
      )
    });
  };

  const addCareer = () => {
    if (careerInput && !formData.target_careers.includes(careerInput)) {
      setFormData({
        ...formData,
        target_careers: [...formData.target_careers, careerInput]
      });
      setCareerInput("");
    }
  };

  const removeCareer = (career) => {
    setFormData({
      ...formData,
      target_careers: formData.target_careers.filter(c => c !== career)
    });
  };

  const toggleInterest = (interest) => {
    const interests = formData.interests.includes(interest)
      ? formData.interests.filter(i => i !== interest)
      : [...formData.interests, interest];
    setFormData({ ...formData, interests });
  };

  const handleFileUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    if (file.type !== "application/pdf") {
      setErrors({ resume: "Please upload a PDF file" });
      return;
    }

    setUploading(true);
    setErrors({});

    try {
      const result = await UploadFile({ file });
      setFormData({ ...formData, resume_url: result.file_url });
    } catch (error) {
      setErrors({ resume: "Failed to upload resume. Please try again." });
    }
    setUploading(false);
  };

  const validateStep = () => {
    const newErrors = {};
    
    switch (currentStep) {
      case 1:
        if (!formData.education_stage) newErrors.education_stage = "Please select your education stage";
        if (!formData.graduation_year) newErrors.graduation_year = "Please enter your graduation year";
        break;
      case 2:
        if (formData.current_skills.length === 0) newErrors.skills = "Please add at least one skill";
        break;
      case 3:
        if (formData.interests.length === 0) newErrors.interests = "Please select at least one interest";
        break;
      case 5:
        if (!formData.bio) newErrors.bio = "Please write a short bio";
        break;
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const nextStep = () => {
    if (validateStep()) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    setCurrentStep(currentStep - 1);
    setErrors({});
  };

  const handleSubmit = () => {
    if (validateStep()) {
      onComplete(formData);
    }
  };

  const progress = (currentStep / steps.length) * 100;
  const currentStepData = steps.find(s => s.number === currentStep);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/30 to-indigo-50/30 flex items-center justify-center p-4">
      <Card className="w-full max-w-2xl border-0 shadow-2xl bg-white/90 backdrop-blur-sm">
        <CardHeader className="text-center pb-8">
          <div className="w-12 h-12 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-xl mx-auto mb-4 flex items-center justify-center">
            {currentStepData && <currentStepData.icon className="w-6 h-6 text-white" />}
          </div>
          <CardTitle className="text-2xl font-bold text-slate-900">
            Welcome to PathPilot!
          </CardTitle>
          <p className="text-slate-600 mt-2">
            Let's set up your profile to provide personalized career guidance
          </p>
          
          {/* Progress Bar */}
          <div className="mt-6">
            <div className="flex justify-between text-xs text-slate-500 mb-2">
              <span>Step {currentStep} of {steps.length}</span>
              <span>{Math.round(progress)}% Complete</span>
            </div>
            <Progress value={progress} className="h-2" />
          </div>

          {/* Step Indicators */}
          <div className="flex justify-center gap-3 mt-6">
            {steps.map((step) => (
              <div
                key={step.number}
                className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-medium transition-all ${
                  step.number <= currentStep
                    ? "bg-blue-600 text-white"
                    : "bg-slate-200 text-slate-500"
                }`}
              >
                {step.number < currentStep ? (
                  <CheckCircle className="w-4 h-4" />
                ) : (
                  step.number
                )}
              </div>
            ))}
          </div>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* Step 1: Education */}
          {currentStep === 1 && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-slate-900 mb-4">
                  Tell us about your education
                </h3>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-2">
                      Education Stage
                    </label>
                    <Select 
                      value={formData.education_stage} 
                      onValueChange={(value) => setFormData({ ...formData, education_stage: value })}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Select your current education stage" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="high_school">High School</SelectItem>
                        <SelectItem value="undergraduate">Undergraduate</SelectItem>
                        <SelectItem value="graduate">Graduate</SelectItem>
                        <SelectItem value="postgraduate">Postgraduate</SelectItem>
                        <SelectItem value="professional">Professional</SelectItem>
                      </SelectContent>
                    </Select>
                    {errors.education_stage && (
                      <p className="text-red-600 text-sm mt-1">{errors.education_stage}</p>
                    )}
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-2">
                      Graduation Year
                    </label>
                    <Input
                      type="number"
                      min="2020"
                      max="2035"
                      value={formData.graduation_year}
                      onChange={(e) => setFormData({ ...formData, graduation_year: e.target.value })}
                      placeholder="e.g., 2025"
                    />
                    {errors.graduation_year && (
                      <p className="text-red-600 text-sm mt-1">{errors.graduation_year}</p>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Step 2: Skills */}
          {currentStep === 2 && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-slate-900 mb-4">
                  What are your current skills?
                </h3>
                
                <div className="flex gap-2 mb-4">
                  <Input
                    value={skillInput}
                    onChange={(e) => setSkillInput(e.target.value)}
                    placeholder="Type a skill and press Enter"
                    onKeyPress={(e) => e.key === "Enter" && (e.preventDefault(), addSkill(skillInput))}
                  />
                  <Button 
                    onClick={() => addSkill(skillInput)}
                    className="px-3"
                  >
                    <Plus className="w-4 h-4" />
                  </Button>
                </div>

                <div className="mb-4">
                  <p className="text-sm text-slate-600 mb-2">Or select from popular skills:</p>
                  <div className="flex flex-wrap gap-2">
                    {PREDEFINED_SKILLS.filter(skill => 
                      !formData.current_skills.find(s => s.name === skill)
                    ).slice(0, 8).map((skill) => (
                      <Badge
                        key={skill}
                        variant="outline"
                        className="cursor-pointer hover:bg-blue-50"
                        onClick={() => addSkill(skill)}
                      >
                        <Plus className="w-3 h-3 mr-1" />
                        {skill}
                      </Badge>
                    ))}
                  </div>
                </div>

                {/* Current Skills */}
                <div className="space-y-3">
                  {formData.current_skills.map((skill) => (
                    <div key={skill.name} className="flex items-center gap-3 p-3 bg-slate-50 rounded-lg">
                      <div className="flex-1">
                        <div className="flex items-center justify-between mb-2">
                          <span className="font-medium text-slate-900">{skill.name}</span>
                          <button
                            onClick={() => removeSkill(skill.name)}
                            className="text-slate-400 hover:text-red-500"
                          >
                            <X className="w-4 h-4" />
                          </button>
                        </div>
                        <div className="flex items-center gap-3">
                          <label className="text-sm text-slate-600">Proficiency:</label>
                          <Select
                            value={skill.level.toString()}
                            onValueChange={(value) => updateSkillLevel(skill.name, value)}
                          >
                            <SelectTrigger className="w-32">
                              <SelectValue />
                            </SelectTrigger>
                            <SelectContent>
                              {[...Array(10)].map((_, i) => (
                                <SelectItem key={i + 1} value={(i + 1).toString()}>
                                  {i + 1}/10
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {errors.skills && (
                  <Alert variant="destructive">
                    <AlertDescription>{errors.skills}</AlertDescription>
                  </Alert>
                )}
              </div>
            </div>
          )}

          {/* Step 3: Interests */}
          {currentStep === 3 && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-slate-900 mb-4">
                  What are your primary interests?
                </h3>
                <p className="text-slate-600 mb-4">Select areas that excite you the most</p>
                
                <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                  {INTEREST_OPTIONS.map((interest) => (
                    <Badge
                      key={interest}
                      variant={formData.interests.includes(interest) ? "default" : "outline"}
                      className={`cursor-pointer text-center py-2 transition-all ${
                        formData.interests.includes(interest)
                          ? "bg-blue-600 hover:bg-blue-700"
                          : "hover:bg-blue-50"
                      }`}
                      onClick={() => toggleInterest(interest)}
                    >
                      {interest}
                    </Badge>
                  ))}
                </div>

                {errors.interests && (
                  <Alert variant="destructive">
                    <AlertDescription>{errors.interests}</AlertDescription>
                  </Alert>
                )}
              </div>
            </div>
          )}

          {/* Step 4: Career Goals */}
          {currentStep === 4 && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-slate-900 mb-4">
                  What are your career goals? (Optional)
                </h3>
                <p className="text-slate-600 mb-4">Tell us about your dream jobs or career aspirations</p>
                
                <div className="flex gap-2 mb-4">
                  <Input
                    value={careerInput}
                    onChange={(e) => setCareerInput(e.target.value)}
                    placeholder="e.g., Software Engineer, Product Manager"
                    onKeyPress={(e) => e.key === "Enter" && (e.preventDefault(), addCareer())}
                  />
                  <Button onClick={addCareer} className="px-3">
                    <Plus className="w-4 h-4" />
                  </Button>
                </div>

                {/* Career Goals List */}
                <div className="space-y-2">
                  {formData.target_careers.map((career) => (
                    <div key={career} className="flex items-center justify-between p-3 bg-slate-50 rounded-lg">
                      <span className="font-medium text-slate-900">{career}</span>
                      <button
                        onClick={() => removeCareer(career)}
                        className="text-slate-400 hover:text-red-500"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Step 5: Profile & Resume */}
          {currentStep === 5 && (
            <div className="space-y-6">
              <div>
                <h3 className="text-lg font-semibold text-slate-900 mb-4">
                  Complete your profile
                </h3>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-2">
                      Bio
                    </label>
                    <Textarea
                      value={formData.bio}
                      onChange={(e) => setFormData({ ...formData, bio: e.target.value })}
                      placeholder="Tell us about yourself, your goals, and what makes you unique..."
                      rows={4}
                    />
                    {errors.bio && (
                      <p className="text-red-600 text-sm mt-1">{errors.bio}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-slate-700 mb-2">
                      Resume (Optional)
                    </label>
                    <div className="border-2 border-dashed border-slate-300 rounded-lg p-6 text-center">
                      {formData.resume_url ? (
                        <div className="flex items-center justify-center gap-2 text-green-600">
                          <CheckCircle className="w-5 h-5" />
                          <span>Resume uploaded successfully!</span>
                        </div>
                      ) : (
                        <>
                          <FileText className="w-8 h-8 text-slate-400 mx-auto mb-2" />
                          <p className="text-slate-600 mb-2">Upload your resume (PDF only)</p>
                          <Button
                            variant="outline"
                            onClick={() => document.getElementById('resume-upload').click()}
                            disabled={uploading}
                          >
                            {uploading ? (
                              <>
                                <div className="w-4 h-4 border-2 border-slate-400 border-t-slate-600 rounded-full animate-spin mr-2" />
                                Uploading...
                              </>
                            ) : (
                              <>
                                <Upload className="w-4 h-4 mr-2" />
                                Choose File
                              </>
                            )}
                          </Button>
                          <input
                            id="resume-upload"
                            type="file"
                            accept=".pdf"
                            onChange={handleFileUpload}
                            className="hidden"
                          />
                        </>
                      )}
                    </div>
                    {errors.resume && (
                      <Alert variant="destructive" className="mt-2">
                        <AlertDescription>{errors.resume}</AlertDescription>
                      </Alert>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Navigation Buttons */}
          <div className="flex justify-between pt-6">
            <Button
              variant="outline"
              onClick={prevStep}
              disabled={currentStep === 1}
              className="gap-2"
            >
              <ArrowLeft className="w-4 h-4" />
              Previous
            </Button>

            {currentStep === steps.length ? (
              <Button
                onClick={handleSubmit}
                className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 gap-2"
              >
                Complete Setup
                <CheckCircle className="w-4 h-4" />
              </Button>
            ) : (
              <Button
                onClick={nextStep}
                className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 gap-2"
              >
                Next
                <ArrowRight className="w-4 h-4" />
              </Button>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}